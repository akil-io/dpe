#!/usr/bin/env node

"use strict";

var program = require('commander');

var debug   = require('debug')('dpe:cli'),
    async   = require('async'),
    path    = require('path'),
    os      = require('os'),
    fs      = require('fs');

var Service = require('../lib/service');

program
    .version(require('../package.json').version)
    .option('-f, --core-file <file>', 'core initiate signal with local file')
    //.option('-f, --core-url <url>', 'core initiate signal')
    .option('-d, --daemon', 'run daemon in current terminal');

program
    .command('configure')
    .description('prepare user profile configuration for first time use')
    .action(function(){
        fs.mkdirSync(path.join(os.homedir(), '.dpe'));
        fs.mkdirSync(path.join(os.homedir(), '.dpe', 'tmp'));
        fs.mkdirSync(path.join(os.homedir(), '.dpe', 'log'));
        fs.mkdirSync(path.join(os.homedir(), '.dpe', 'modules'));

        (new Service({
            init: true
        })).save();
    });

program
    .command('start <core>')
    .description('start dpe daemon in background and detach cli')
    .action(function(core){
        try {
            var s = new Service({
                init: false
            });
        } catch (err) {
            console.log('For first time you need to run: sudo dpe service configure ..., read help for options.');
            process.exit();
        }
        const spawn = require('child_process').spawn;
        const out = fs.openSync(s.get('log.out'), 'a');
        const err = fs.openSync(s.get('log.err'), 'a');

        const child = spawn(process.argv[1], ['--daemon','--core-file', path.resolve(core)], {
            detached: true,
            cwd: process.cwd(),
            stdio: ['ignore', out, err]
        });

        child.unref();
    });

program
    .command('stop')
    .description('stop dpe daemon in background')
    .action(function(){
        try {
            var pid = (new Service()).getPid();
        } catch (err) {
            console.log('For first time you need to run: sudo dpe service configure ..., read help for options.');
            process.exit();
        }
        if (!pid) {
            console.log('Service is not found');
        } else {
            console.log(`Try to kill process ${pid}`);
            process.kill(pid, 'SIGINT');
        }
    });

program
    .command('status')
    .description('stop dpe daemon')
    .action(function(){
        try {
            var pid = (new Service()).getPid();
        } catch (err) {
            console.log('For first time you need to run: sudo dpe service configure ..., read help for options.', err);
            process.exit();
        }
        if (!pid) {
            console.log('Stopped');
        } else {
            console.log(`Started with pid ${pid}`);
        }
    });

program.parse(process.argv);

//noinspection JSUnresolvedVariable
if (program.daemon) {
    var signal = null;
    try {
        if (program.coreFile) {
            var corePath = path.resolve(program.coreFile);
            signal = JSON.parse(fs.readFileSync(path.resolve(program.coreFile), 'utf8'));
            for (let key of Object.keys(signal)) {
                signal[key]["require"] = path.resolve( path.dirname(corePath), signal[key]["require"] );
            }
        } else {
            Service.error(new Error('E_NO_CORE'));
            process.exit(1);
        }
        (new Service({
            init: false
        }, signal)).start();
    } catch (err) {
        Service.error(err);
    }
}