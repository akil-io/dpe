#!/usr/bin/env node

"use strict";

var program = require('commander');

var debug   = require('debug')('dpe:cli'),
    async   = require('async'),
    path    = require('path'),
    os      = require('os'),
    fs      = require('fs');

var Service = require('../lib/service');

program
    .version(require('../package.json').version)
    .option('-m, --modules <modules>', 'core initiate signal')
    .option('-n, --prefix <prefix>', 'core name prefix')
    .option('-p, --port <port>', 'cli port')
    .option('-d, --daemon', 'run daemon in current terminal');

program
    .command('configure')
    .description('prepare user profile configuration for first time use')
    .action(function(){
        fs.mkdirSync(path.join(os.homedir(), '.dpe'));
        fs.mkdirSync(path.join(os.homedir(), '.dpe', 'tmp'));
        fs.mkdirSync(path.join(os.homedir(), '.dpe', 'log'));
        fs.mkdirSync(path.join(os.homedir(), '.dpe', 'modules'));

        (new Service({
            init: true,
            prefix: ''
        })).save();
    });

program
    .command('reset')
    .description('clear configuration')
    .action(function(){
        try {
            var pid = (new Service()).getPid();
        } catch (err) {}
        if (pid) {
            console.log(`Try to kill process ${pid}`);
            process.kill(pid, 'SIGINT');
        }
        require('child_process').spawn('rm', ['-rf', path.join(os.homedir(), '.dpe')], {
            stdio: 'inherit'
        });
    });

program
    .command('start <modules...>')
    .description('start dpe daemon in background and detach cli')
    .action(function(modules) {
        try {
            var s = new Service({
                init: false,
                prefix: ''
            });
        } catch (err) {
            console.log('For first time you need to run: sudo dpe service configure ..., read help for options.');
            process.exit();
        }
        var isCoreFound = false;
        modules.map((name) => {
            if (s.get('deps.' + name).type == 'core') isCoreFound = true;
        });
        if (!isCoreFound) {
            console.log('Need at least one core in module list');
            process.exit(1);
        }
        const spawn = require('child_process').spawn;
        const out = fs.openSync(s.get('log.out'), 'a');
        const err = fs.openSync(s.get('log.err'), 'a');

        const child = spawn(process.argv[1], ['--daemon','--modules', modules.join(',')], {
            detached: true,
            cwd: process.cwd(),
            stdio: ['ignore', out, err]
        });

        child.unref();
    });

program
    .command('stop')
    .description('stop dpe daemon in background')
    .action(function(){
        try {
            var pid = (new Service()).getPid();
        } catch (err) {
            console.log('For first time you need to run: sudo dpe service configure ..., read help for options.');
            process.exit();
        }
        if (!pid) {
            console.log('Service is not found');
        } else {
            console.log(`Try to kill process ${pid}`);
            process.kill(pid, 'SIGINT');
        }
    });

program
    .command('status')
    .description('stop dpe daemon')
    .action(function(){
        try {
            var pid = (new Service()).getPid();
        } catch (err) {
            console.log('For first time you need to run: sudo dpe service configure ..., read help for options.', err);
            process.exit();
        }
        if (!pid) {
            console.log('Stopped');
        } else {
            console.log(`Started with pid ${pid}`);
        }
    });

program.parse(process.argv);

//noinspection JSUnresolvedVariable
if (program.daemon) {
    var signal = null;
    try {
        if (program.modules) {
            console.log(program.modules);
        }
        (new Service({
            init: false,
            prefix: program.prefix ? program.prefix : '',
            port: program.port ? program.port : null
        }, program.modules.split(','))).start();
    } catch (err) {
        Service.error(err);
    }
}